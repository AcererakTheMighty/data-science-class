---
title: "Client Report - [Insert Project Title]"
subtitle: "Course DS 250"
author: "[STUDENT NAME]"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---
#I will be providing a video link so you can look at the results as well, here it is: https://www.loom.com/share/e4681775fafd4967bfb4998702b229c8?sid=833a5216-7828-464b-b407-46f71e3cde34

# Import libraries
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, confusion_matrix, roc_auc_score, precision_score, recall_score

# Load dataset
url = "https://raw.githubusercontent.com/byuidatascience/data4dwellings/master/data-raw/dwellings_ml/dwellings_ml.csv"
df = pd.read_csv(url)

# Display dataset structure
print(df.head())
print(df.info())

----

sns.histplot(data=df, x='livearea', hue='before1980', kde=True)
plt.title("Distribution of Living Area by Build Year")
plt.xlabel("Living Area (sq ft)")
plt.ylabel("Frequency")
plt.show()

----

sns.boxplot(data=df, x='before1980', y='sprice')
plt.title("Sale Price by Build Year")
plt.xlabel("Built Before 1980 (1=Yes)")
plt.ylabel("Sale Price")
plt.show()

----

# Select numeric columns
numeric_cols = df.select_dtypes(include=['float64', 'int64']).columns

# Compute the correlation matrix
corr = df[numeric_cols].corr()

# Optional: Filter for strong correlations (e.g., above 0.5 or below -0.5)
strong_corr = corr[(corr >= 0.5) | (corr <= -0.5)].fillna(0)

# Plot the heatmap
plt.figure(figsize=(12, 8))  # Increase figure size for readability
sns.heatmap(
    strong_corr,
    annot=True,
    cmap='coolwarm',
    fmt=".2f",
    linewidths=0.5,
    cbar_kws={'shrink': 0.8}  # Adjust color bar size
)

# Rotate the x and y labels for better visualization
plt.xticks(rotation=45, ha='right', fontsize=10)
plt.yticks(fontsize=10)

# Add a title
plt.title("Filtered Correlation Heatmap", fontsize=14)
plt.show()

----

# Define features and target variable
X = df[['livearea', 'finbsmnt', 'basement', 'yrbuilt', 'numbdrm', 'numbaths', 'nocars']]
y = df['before1980']

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Normalize the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

----

# Train the model
model = RandomForestClassifier(random_state=42)
model.fit(X_train_scaled, y_train)

# Make predictions
y_pred = model.predict(X_test_scaled)

# Evaluate accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy * 100:.2f}%")

----

# Extract feature importances
importances = model.feature_importances_
feature_names = X.columns

# Create a DataFrame for feature importance
importance_df = pd.DataFrame({'Feature': feature_names, 'Importance': importances}).sort_values(by='Importance', ascending=False)

# Plot feature importances
sns.barplot(data=importance_df, x='Importance', y='Feature', palette='viridis')
plt.title("Feature Importance")
plt.xlabel("Importance")
plt.ylabel("Feature")
plt.show()

----

# Generate confusion matrix
cm = confusion_matrix(y_test, y_pred)

# Plot confusion matrix as heatmap
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['After 1980', 'Before 1980'], yticklabels=['After 1980', 'Before 1980'])
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

----

# Calculate additional metrics
roc_auc = roc_auc_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)

print(f"ROC-AUC Score: {roc_auc:.2f}")
print(f"Precision: {precision:.2f}")
print(f"Recall: {recall:.2f}")