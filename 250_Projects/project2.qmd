---
title: "Client Report - Late Flights and Missing Data"
subtitle: "Course DS 250"
author: "Landon Smith"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

Video: https://www.loom.com/share/ac50d856236745baa0087486fc50c8fa?sid=4b7e3ba3-1c04-4b10-942f-6081cef30da6

````
Q1: Fix all of the varied missing data types in the data to be consistent (all missing values should be displayed as “NaN”)
````

````
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Load the dataset
url = 'https://raw.githubusercontent.com/byuidatascience/data4missing/master/data-raw/flights_missing/flights_missing.json'
df = pd.read_json(url)

# Step 1: Ensure missing data is consistent and represented as "NaN"
df = df.replace(["", " ", None], np.nan)  # Replacing empty or None with NaN

# Display one row example in JSON format
sample_row = df.iloc[0].to_json()
print("Sample Row with NaN representation:\n", sample_row)

#We removed all the missing data here. 
````

Which airport has the worst delays? What is the best month to fly if you want to avoid delays of any length? 

````
# Step 2: Determine the airport with the worst delays
# Total number of flights per airport
total_flights = df.groupby('airport_code')['num_of_flights_total'].sum()

# Total number of delayed flights per airport
delayed_flights = df.groupby('airport_code')['num_of_delays_total'].sum()

# Proportion of delayed flights per airport
proportion_delayed = delayed_flights / total_flights

# Average delay time in hours per airport
avg_delay_hours = df.groupby('airport_code')['minutes_delayed_total'].mean() / 60

# Summary table
summary_table = pd.DataFrame({
    'Total Flights': total_flights,
    'Total Delayed Flights': delayed_flights,
    'Proportion of Delayed Flights': proportion_delayed,
    'Average Delay (Hours)': avg_delay_hours
}).fillna(0)  # Fill NaN with 0 for airports without delays

print("\nWorst Airport Summary Table:\n", summary_table)

# Airport with the worst delays based on highest proportion of delayed flights
worst_airport = summary_table['Proportion of Delayed Flights'].idxmax()
print(f"\nThe airport with the worst delays is {worst_airport}.")

# Step 3: Find the best month to fly with minimal delays
# Removing rows with missing 'month' values
df = df.dropna(subset=['month'])

# Group by month and calculate average delays
monthly_delays = df.groupby('month')['minutes_delayed_total'].mean()
plt.figure(figsize=(10, 6))
monthly_delays.plot(kind='bar')
plt.title("Average Delay Time by Month")
plt.xlabel("Month")
plt.ylabel("Average Delay Time (minutes)")
plt.show()

# Best month to fly
best_month = monthly_delays.idxmin()
print(f"\nThe best month to fly to avoid delays is {best_month}.")

The answer we got was that November was the best time to fly without any delays
````

````
# Step 4: Create a new weather delay variable that includes mild weather delays
# Fill NaN in 'num_of_delays_late_aircraft' with its mean value
df['num_of_delays_late_aircraft'].fillna(df['num_of_delays_late_aircraft'].mean(), inplace=True)

# Calculate total weather-related delays
df['total_weather_delays'] = df['num_of_delays_weather'] + \
                             0.3 * df['num_of_delays_late_aircraft'] + \
                             np.where(df['month'].isin([4, 5, 6, 7, 8]),
                                      0.4 * df['num_of_delays_nas'],
                                      0.65 * df['num_of_delays_nas'])

# Display first 5 rows to verify calculations
print("\nFirst 5 Rows with Total Weather Delays:\n", df[['airport_code', 'month', 'num_of_delays_weather',
                                                         'num_of_delays_late_aircraft', 'num_of_delays_nas',
                                                         'total_weather_delays']].head())
````

According to the BTS website, the “Weather” category only accounts for severe weather delays. Mild weather delays are not counted in the “Weather” category, but are actually included in both the “NAS” and “Late-Arriving Aircraft” categories. Your job is to create a new column that calculates the total number of flights delayed by weather (both severe and mild). You will need to replace all the missing values in the Late Aircraft variable with the mean. Show your work by printing the first 5 rows of data in a table. Use these three rules for your calculations:

````
# Step 5: Plot proportion of flights delayed by weather per airport
total_weather_delays_per_airport = df.groupby('airport_code')['total_weather_delays'].sum()
total_flights_per_airport = df.groupby('airport_code')['num_of_flights_total'].sum()
proportion_weather_delays = total_weather_delays_per_airport / total_flights_per_airport

# Plotting
plt.figure(figsize=(10, 6))
proportion_weather_delays.plot(kind='bar', color='skyblue')
plt.title("Proportion of Flights Delayed by Weather by Airport")
plt.xlabel("Airport Code")
plt.ylabel("Proportion of Weather Delays")
plt.show()

# Summary of findings from the weather delay analysis
print("\nWeather Delay Proportion Summary:\n", proportion_weather_delays)

#We found that the SFO is the worst in regards to delay
````

The analysis reveals that San Francisco International Airport (SFO) experiences the highest proportion of delayed flights, making it the airport with the most significant delay challenges. Additionally, for travelers aiming to avoid delays, November emerges as the optimal month to fly, with the lowest recorded delay metrics, enhancing the chances of on-time departures and arrivals.

